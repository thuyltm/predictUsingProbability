install.packages("classInt")
install.packages("BAMMtools")
library("BAMMtools")
data(whales, events.whales)
ed <- getEventData(whales, events.whales, burnin=0.25, nsamples=500)
ed <- dtRates(ed, tau=0.01)
vec <- ed$dtrates$rates[[1]]
library("BAMMtools")
data(whales, events.whales)
ed <- getEventData(whales, events.whales, burnin=0.25, nsamples=500)
ed <- dtRates(ed, tau=0.01)
vec <- ed$dtrates$rates[[1]]
getJenksBreaks(vec, 64)
vec
x=rnorm(100)
d=density(x, from=-5, to=5, n=1000)
d$x
d$y
z=c(-2,-1,2)
x=seq(-5,5,0.01)
plot(0,0,xlim=c(-5,5),ylim = c(-0.02,0.8),
pch=NA,ylab="",xlab="z")
for(i in 1:length(z)) {
points(z[i], 0, pch="X", col=2)
}
abline(h=0)
x_total = numeric(length(x))
for(i in 1:length(x_total)) {
for(j in 1:length(z)) {
x_total[i] = x_total[i] +
dnorm(x[i], z[j], sd=1)
}
}
lines(x, x_total, col=4, lty=2)
plot(x, x_total/3,
xlim=c(-5, 5), ylim=c(-0.02, 0.8),
ylab="", xlab="z", type="l")
abline(h=0)
density(z, adjust=1, bw=1)
lines(x, x_total, col=4, lty=2)
plot(x, x_total/3,
xlim=c(-5, 5), ylim=c(-0.02, 0.8),
ylab="", xlab="z", type="l")
x
lines(x, x_total, col=4, lty=2)
plot(x, x_total/3,
xlim=c(-5, 5), ylim=c(-0.02, 0.8),
ylab="", xlab="z", type="l")
lines(x, x_total, col=4, lty=2)
plot(x, x_total/3,
xlim=c(-5, 5), ylim=c(-0.02, 0.8),
ylab="", xlab="z", type="l")
abline(h=0)
density(z, adjust=1, bw=1)
z
?dnorm
x_total
x
length(x)
numeric(length(x))
density(z, adjust=1, bw=1)
?density
install.packages("ks")
install.packages("frbs")
library("ks")
data(unicef)
ubinned=binning(x=unicef)
library("ks")
data(unicef)
library("MASS")
library("MASS")
data(iris)
ir = iris[,1]
ir.gr = iris[,5]
kda.fhat=kda(x=ir, x.group=ir.gr, xmin=3, xmax=9)
?binning
?kda
install.packages("binning")
library(ks)
install.packages("ks", dependencies = TRUE)
library(ks)
library(ks-package)
library(kde)
installed.packages("ks-package")
library("ks")
installed.packages("ks",dependencies=TRUE)
installed.packages("ks", dependencies = TRUE)
install.packages("ks", dependencies = TRUE)
install.packages("rgl", dependencies = TRUE)
install.packages("curl", dependencies = TRUE)
install.packages("ks", dependencies = TRUE)
install.packages("ks", dependencies = TRUE)
library(ks)
library("ks")
library("MASS")
data(iris)
ir = iris[,1]
ir.gr = iris[,5]
kda.fhat=kda(x=ir, x.group=ir.gr, xmin=3, xmax=9)
plot(kda.fhat, xlab = "Sepal length")
data("unicef")
ubinned=binning(x=unicef)
set.seed(8192)
x <- rmvnorm.mixt(n=1000, mus=c(0,0), Sigmas=diag(2), props=1)
fhat <- kde(x=x, binned=TRUE)
contourLevels(fhat, cont=c(75, 50, 25))
contourSizes(fhat, cont=25, approx=TRUE)
require(frbs)
install.packages("frbs")
install.packages("frbs")
require(frbs)
data(frbsData)
frbsData
frbsData$GasFurnance
frbsData$GasFurnance.dt
frbsData$GasFurnance.dt
frbsData$GasFurnance.dt[1:4,1]
frbsData$GasFurnance.dt[1:4,]
frbsData$GasFurnance.dt[1:4,1:2]
frbsData$GasFurnance.dt[1:4,3]
matrix(frbsData$GasFurnance.dt[1:4,3], ncol=1)
data.train <- frbsData$GasFurnance.dt[1 : 204, ]
data.tst <- frbsData$GasFurnance.dt[205 : 292, 1 : 2]
real.val <- matrix(frbsData$GasFurnance.dt[205 : 292, 3], ncol = 1)
range.data <-apply(data.train, 2, range)
data.train
?apply
data.train
?range
x <- c(NA, 1:3, -1:1/0); x
range(x)
range(x, na.rm = TRUE)
range(x)
range(x, na.rm=TRUE)
range(x, na.rm=TRUE, finite=TRUE)
data.train
range.data <-apply(data.train, 2, range)
range.data
?list
require(graphics)
list(x = cars[,1], y = cars[,2])
cars
control <- list(num.labels = 15, type.mf = "GAUSSIAN", type.defuz = "WAM",
type.tnorm = "MIN", type.snorm = "MAX", type.implication.func = "ZADEH",
name = "sim-0")
control
method.type <- "WM"
range.data
method.type
?frbs.learn
data.train
data(iris)
set.seed(2)
irisShuffled <- iris[sample(nrow(iris)), ]
iris
nrow(iris)
sample(nrow(iris))
?nrow
ma <- matrix(1:12, 3, 4)
ma
nrow(ma)
?sample
require(frbs)
data(iris)
set.seed(2)
irisShuffled <- iris[sample(nrow(iris)), ]
iris
nrow(iris)
sample(nrow(iris))
iris[sample(nrow(iris)),]
irisShuffled <- iris[sample(nrow(iris)), ]
irisShuffled[, 5]
?unclass
x <- 10
class(x) # "numeric"
oldClass(x) # NULL
inherits(x, "a") #FALSE
class(x) <- c("a", "b")
inherits(x,"a") #TRUE
inherits(x, "a", TRUE) # 1
inherits(x, "c", TRUE) # 1
inherits(x, "b", TRUE) # 1
inherits(x, "b") # 1
irisShuffled[, 5]
unclass(irisShuffled[, 5])
irisShuffled[, 5] <- unclass(irisShuffled[, 5])
irisShuffled
tra.iris <- irisShuffled[1 : 105, ]
irisShuffled[1 : 105, ]
tra.iris
tst.iris <- irisShuffled[106 : nrow(irisShuffled), 1 : 4]
real.iris <- matrix(irisShuffled[106 : nrow(irisShuffled), 5], ncol = 1)
real.iris
-ncol(iris)
iris[, -ncol(iris)]
range.data.input <- apply(iris[, -ncol(iris)], 2, range)
method.type <- "FRBCS.W"
control <- list(num.labels = 7, type.mf = "GAUSSIAN", type.tnorm = "MIN",
type.snorm = "MAX", type.implication.func = "ZADEH")
control
?frbs.learn
frbs.learn(tra.iris, range.data.input, method.type, control)
?type.implication.func
predict(object.cls, tst.iris)
object.cls <- frbs.learn(tra.iris, range.data.input, method.type, control)
predict(object.cls, tst.iris)
tst.iris
res.test <- predict(object.cls, tst.iris)
summary(object.cls)
plotMF(object.cls)
data(frbsData)
frbsData
data.train <- frbsData$GasFurnance.dt[1 : 204, ]
data.tst <- frbsData$GasFurnance.dt[205 : 292, 1 : 2]
real.val <- matrix(frbsData$GasFurnance.dt[205 : 292, 3], ncol = 1)
range.data <-apply(data.train, 2, range)
method.type <- "WM"
control <- list(num.labels = 15, type.mf = "GAUSSIAN", type.defuz = "WAM",
type.tnorm = "MIN", type.snorm = "MAX", type.implication.func = "ZADEH",
name = "sim-0")
object.reg <- frbs.learn(data.train, range.data, method.type, control)
res.test <- predict(object.reg, data.tst)
summary(object.reg)
plotMF(object.reg)
data(frbsData)
data.train <- frbsData$GasFurnance.dt[1 : 204, ]
data.fit <- data.train[, 1 : 2]
data.tst <- frbsData$GasFurnance.dt[205 : 292, 1 : 2]
real.val <- matrix(frbsData$GasFurnance.dt[205 : 292, 3], ncol = 1)
range.data<-matrix(c(-2.716, 2.834, 45.6, 60.5, 45.6, 60.5), nrow = 2)
method.type <- "WM"
control <- list(num.labels = 3, type.mf = "GAUSSIAN", type.defuz = "WAM",
type.tnorm = "MIN", type.snorm = "MAX",
type.implication.func = "ZADEH", name="sim-0")
object <- frbs.learn(data.train, range.data, method.type, control)
frbsPMML(object)
require(frbs)
data(iris)
set.seed(2)
irisShuffled <- iris[sample(nrow(iris)), ]
irisShuffled[, 5] <- unclass(irisShuffled[, 5])
tra.iris <- irisShuffled[1 : 105, ]
tst.iris <- irisShuffled[106 : nrow(irisShuffled), 1 : 4]
real.iris <- matrix(irisShuffled[106 : nrow(irisShuffled), 5], ncol = 1)
range.data.input <- apply(iris[, -ncol(iris)], 2, range)
method.type <- "FRBCS.W"
control <- list(num.labels = 7, type.mf = "TRIANGLE", type.tnorm = "MIN",
type.snorm = "MAX", type.implication.func = "ZADEH")
object.cls <- frbs.learn(tra.iris, range.data.input, method.type, control)
res.test <- predict(object.cls, tst.iris)
summary(object.cls)
plotMF(object.cls)
data(iris)
set.seed(2)
irisShuffled <- iris[sample(nrow(iris)), ]
irisShuffled[, 5] <- unclass(irisShuffled[, 5])
tra.iris <- irisShuffled[1 : 105, ]
tst.iris <- irisShuffled[106 : nrow(irisShuffled), 1 : 4]
real.iris <- matrix(irisShuffled[106 : nrow(irisShuffled), 5], ncol = 1)
range.data.input <- apply(iris[, -ncol(iris)], 2, range)
method.type <- "FRBCS.W"
control <- list(num.labels = 7, type.mf = "TRAPEZOID", type.tnorm = "MIN",
type.snorm = "MAX", type.implication.func = "ZADEH")
object.cls <- frbs.learn(tra.iris, range.data.input, method.type, control)
res.test <- predict(object.cls, tst.iris)
summary(object.cls)
plotMF(object.cls)
iris
range.data.input
summary(object.cls)
x = sample(-100:100,50)
normalized = (x-min(x))/(max(x)-min(x))
par(mfrow=c(1,2))
hist(x,xlab="Data",col="lightblue",main="")
hist(normalized,xlab="Normalized Data",col="lightblue",main="")
x
x = sample(-100:100,50)
x
require(frbs)
require(frbs)
data("iris", package = "datasets")
irisShuffled <- iris[sample(nrow(iris)), ]
irisShuffled[, 5] <- unclass(irisShuffled[, 5])
range.data.input <- apply(iris[, -ncol(iris)], 2, range)
tra.iris <- irisShuffled[1:140, ]
tst.iris <- irisShuffled[141:nrow(irisShuffled), 1:4]
real.iris <- matrix(irisShuffled[141:nrow(irisShuffled), 5], ncol = 1)
object.frbcs.w <- frbs.learn(tra.iris, range.data.input,
method.type = "FRBCS.W",
control = list(num.labels = 3,
type.mf = "TRAPEZOID"))
summary(object.frbcs.w)
tra.iris
res.test <- predict(object.frbcs.w, tst.iris )
res.test
real.iris
plotMF(object.frbcs.w)
install.packages(’FuzzyNumbers’)
install.packages('FuzzyNumbers')
library(help='FuzzyNumbers')
rm(list=ls(all.names = TRUE))
head(airquality)
ozone = airquality$Ozone
length(ozone)
summary(ozone)
length(ozone[is.na(ozone)==F])
length(ozone[!is.na(ozone)])
n=sum(!is.na(ozone))
n
mean(ozone)
mean.ozone = mean(ozone, na.rm = T)
mean.ozone
var.ozone = var(ozone, na.rm = T)
var.ozone
sd.ozone = sd(ozone, na.rm = T)
sd.ozone
max.ozone = max(ozone, na.rm = T)
max.ozone
hist(ozone)
hist(ozone, breaks = 15)
hist(ozone, breaks = 15, freq = F)
hist(ozone, breaks = 15, freq = F,ylim = c(0, 0.025))
hist(ozone, breaks = 15, freq = F, xlab = 'Ozone (ppb)',
ylim = c(0, 0.025), ylab = 'Probability',
main = 'Histogram of Ozone Pollution Data with Kernel Density Plot')
lines(density(ozone, na.rm = T, from = 0, to = max.ozone))
lines(density(ozone, na.rm = T, from = 0, to = max.ozone))
?dunif
x
x=seq(-1.5, 1.5, by=0.01)
x
x=seq(-1.5, 1.5, by=0.01)
uniform1 = dunif(x, min=-0.25, max=0.25)
uniform2 = dunif(x, min=-1.00, max=1.00)
plot(x, uniform1, type = 'l', ylab='f(x)',
xlab='x',
main = '2 Uniform Kernels with different bandwidths',
col = 'red')
lines(x, uniform2, col='blue')
legend(0.28, 1.5, c('Uniform(-0.25, 0.25)', 'Uniform(-1.00, 1.00)'), lty = c(1,1), col = c('red', 'blue'), box.lwd = 0)
legend(0.28, 1.5, c('Uniform(-0.25, 0.25)', 'Uniform(-1.00, 1.00)'), lty = c(1,1), col = c('red', 'blue'), box.lwd = 0)
require(frbs)
ozone = airquality$Ozone
n = sum(!is.na(ozone))
mean.ozone = mean(ozone, na.rm = T)
mean.ozone
var.ozone = var(ozone, na.rm = T)
var.ozone
sd.ozone = sd(ozone, na.rm = T)
sd.ozone
set.seed(1)
ozone2 = rgamma(n, shape = mean.ozone^2/var.ozone+3,
scale = var.ozone/mean.ozone+3)
density.ozone = density(ozone, na.rm = T)
density.ozone2 = density(ozone2, na.rm = T)
n.density1 = density.ozone$n
n.density2 = density.ozone2$n
bw.density1 = density.ozone$bw
bw.density2 = density.ozone2$bw
plot(density.ozone2,
main = 'Kernel Density Estimates of Ozone \n in New York and Ozonopolis',
xlab = 'Ozone (ppb)', ylab = 'Density',
ylim = c(0, max(density.ozone$y, na.rm = T)), lty = 1)
lines(density.ozone, lty=3)
legend(100, 0.015, paste('New York: N = ', n.density1, ', Bandwidth = ',
round(bw.density1, 1), sep = ''), bty = 'n')
legend(100, 0.013, paste('Ozonopolis: N = ', n.density2, ', Bandwidth = ',
round(bw.density2, 1), sep = ''), bty = 'n')
legend(115, 0.011, c('New York', 'Ozonopolis'), lty = c(3,1), bty = 'n')
plot(density.ozone,
main = 'Kernel Density Plot and Rug Plot of Ozone \n in New York',
xlab = 'Ozone (ppb)', ylab = 'Density')
rug(ozone)
ozone
ozone2
plot(ozone2)
plot(ozone)
plot(ozone2)
plot(ozone)
density.ozone
plot(density.ozone)
plot(density.ozone2)
plot(density.ozone2,
main = 'Kernel Density Estimates of Ozone \n in New York and Ozonopolis',
xlab = 'Ozone (ppb)', ylab = 'Density',
ylim = c(0, max(density.ozone$y, na.rm = T)), lty = 1)
lines(density.ozone, lty=3)
plot(ozone)
lines(ozone2)
line(density.ozone)
plot(density.ozone)
lines(ozone)
plot(ozone)
lines(ozone)
plot(density.ozone)
plot(ozone)
plot(density.ozone)
plot(ozone)
plot(density.ozone)
setwd("/home/thuy1/git/predictUsingProbability/Preprocess")
dataFile = "data_80.txt"
count.fields(dataFile, sep = ",")
no_col <- max(count.fields(dataFile, sep = ","))
no_col
dat=read.table(dataFile, header = FALSE, sep = ",",
col.names = 1:no_col, fill = TRUE)
dat
dat[20,]
