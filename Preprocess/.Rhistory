summary(object.cls)
x = sample(-100:100,50)
normalized = (x-min(x))/(max(x)-min(x))
par(mfrow=c(1,2))
hist(x,xlab="Data",col="lightblue",main="")
hist(normalized,xlab="Normalized Data",col="lightblue",main="")
x
x = sample(-100:100,50)
x
require(frbs)
require(frbs)
data("iris", package = "datasets")
irisShuffled <- iris[sample(nrow(iris)), ]
irisShuffled[, 5] <- unclass(irisShuffled[, 5])
range.data.input <- apply(iris[, -ncol(iris)], 2, range)
tra.iris <- irisShuffled[1:140, ]
tst.iris <- irisShuffled[141:nrow(irisShuffled), 1:4]
real.iris <- matrix(irisShuffled[141:nrow(irisShuffled), 5], ncol = 1)
object.frbcs.w <- frbs.learn(tra.iris, range.data.input,
method.type = "FRBCS.W",
control = list(num.labels = 3,
type.mf = "TRAPEZOID"))
summary(object.frbcs.w)
tra.iris
res.test <- predict(object.frbcs.w, tst.iris )
res.test
real.iris
plotMF(object.frbcs.w)
install.packages(’FuzzyNumbers’)
install.packages('FuzzyNumbers')
library(help='FuzzyNumbers')
rm(list=ls(all.names = TRUE))
head(airquality)
ozone = airquality$Ozone
length(ozone)
summary(ozone)
length(ozone[is.na(ozone)==F])
length(ozone[!is.na(ozone)])
n=sum(!is.na(ozone))
n
mean(ozone)
mean.ozone = mean(ozone, na.rm = T)
mean.ozone
var.ozone = var(ozone, na.rm = T)
var.ozone
sd.ozone = sd(ozone, na.rm = T)
sd.ozone
max.ozone = max(ozone, na.rm = T)
max.ozone
hist(ozone)
hist(ozone, breaks = 15)
hist(ozone, breaks = 15, freq = F)
hist(ozone, breaks = 15, freq = F,ylim = c(0, 0.025))
hist(ozone, breaks = 15, freq = F, xlab = 'Ozone (ppb)',
ylim = c(0, 0.025), ylab = 'Probability',
main = 'Histogram of Ozone Pollution Data with Kernel Density Plot')
lines(density(ozone, na.rm = T, from = 0, to = max.ozone))
lines(density(ozone, na.rm = T, from = 0, to = max.ozone))
?dunif
x
x=seq(-1.5, 1.5, by=0.01)
x
x=seq(-1.5, 1.5, by=0.01)
uniform1 = dunif(x, min=-0.25, max=0.25)
uniform2 = dunif(x, min=-1.00, max=1.00)
plot(x, uniform1, type = 'l', ylab='f(x)',
xlab='x',
main = '2 Uniform Kernels with different bandwidths',
col = 'red')
lines(x, uniform2, col='blue')
legend(0.28, 1.5, c('Uniform(-0.25, 0.25)', 'Uniform(-1.00, 1.00)'), lty = c(1,1), col = c('red', 'blue'), box.lwd = 0)
legend(0.28, 1.5, c('Uniform(-0.25, 0.25)', 'Uniform(-1.00, 1.00)'), lty = c(1,1), col = c('red', 'blue'), box.lwd = 0)
require(frbs)
ozone = airquality$Ozone
n = sum(!is.na(ozone))
mean.ozone = mean(ozone, na.rm = T)
mean.ozone
var.ozone = var(ozone, na.rm = T)
var.ozone
sd.ozone = sd(ozone, na.rm = T)
sd.ozone
set.seed(1)
ozone2 = rgamma(n, shape = mean.ozone^2/var.ozone+3,
scale = var.ozone/mean.ozone+3)
density.ozone = density(ozone, na.rm = T)
density.ozone2 = density(ozone2, na.rm = T)
n.density1 = density.ozone$n
n.density2 = density.ozone2$n
bw.density1 = density.ozone$bw
bw.density2 = density.ozone2$bw
plot(density.ozone2,
main = 'Kernel Density Estimates of Ozone \n in New York and Ozonopolis',
xlab = 'Ozone (ppb)', ylab = 'Density',
ylim = c(0, max(density.ozone$y, na.rm = T)), lty = 1)
lines(density.ozone, lty=3)
legend(100, 0.015, paste('New York: N = ', n.density1, ', Bandwidth = ',
round(bw.density1, 1), sep = ''), bty = 'n')
legend(100, 0.013, paste('Ozonopolis: N = ', n.density2, ', Bandwidth = ',
round(bw.density2, 1), sep = ''), bty = 'n')
legend(115, 0.011, c('New York', 'Ozonopolis'), lty = c(3,1), bty = 'n')
plot(density.ozone,
main = 'Kernel Density Plot and Rug Plot of Ozone \n in New York',
xlab = 'Ozone (ppb)', ylab = 'Density')
rug(ozone)
ozone
ozone2
plot(ozone2)
plot(ozone)
plot(ozone2)
plot(ozone)
density.ozone
plot(density.ozone)
plot(density.ozone2)
plot(density.ozone2,
main = 'Kernel Density Estimates of Ozone \n in New York and Ozonopolis',
xlab = 'Ozone (ppb)', ylab = 'Density',
ylim = c(0, max(density.ozone$y, na.rm = T)), lty = 1)
lines(density.ozone, lty=3)
plot(ozone)
lines(ozone2)
line(density.ozone)
plot(density.ozone)
lines(ozone)
plot(ozone)
lines(ozone)
plot(density.ozone)
plot(ozone)
plot(density.ozone)
plot(ozone)
plot(density.ozone)
x<-seq(-3,3,by=0.1)
plot(X,pnorm(X, mean=1, sd=1), type="l",
xlab=expression(x), ylab=expression("c.d.f cua Gauss chuan"));
X<-seq(-3,3,by=0.1)
plot(X,pnorm(X, mean=1, sd=1), type="l",
xlab=expression(x), ylab=expression("c.d.f cua Gauss chuan"));
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
arrows(0.5,0.1,-0.2,0,length=.15)
text(0.5,0.12,"-0.2533")
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
?plot
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
par(new=TRUE)
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=1)
plot(x,y, type="p", lwd=1)
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
par(new=TRUE)
x1   <- seq(0,20,length=1000)
y1   <- dnorm(x,mean=10, sd=1)
plot(x1,y1, type="l", lwd=1)
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
par(new=TRUE)
x1   <- seq(0,20,length=1000)
y1   <- dnorm(x,mean=10, sd=1)
plot(x1,y1, type="l", lwd=1)
x2   <- seq(0,20,length=1000)
y2   <- dnorm(x,mean=10, sd=2)
plot(x2,y2, type="l", lwd=1)
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
par(new=TRUE)
x1   <- seq(0,20,length=1000)
y1   <- dnorm(x,mean=10, sd=1)
plot(x1,y1, type="l", lwd=1)
par(new=TRUE)
x2   <- seq(0,20,length=1000)
y2   <- dnorm(x,mean=10, sd=2)
plot(x2,y2, type="l", lwd=1)
?plot
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
par(new=TRUE)
x1   <- seq(0,20,length=1000)
y1   <- dnorm(x,mean=10, sd=1)
plot(x1,y1, type="l", lwd=1)
par(new=TRUE)
x2   <- seq(0,20,length=1000)
y2   <- dnorm(x,mean=10, sd=2)
plot(x2,y2, type="l", lwd=1)
X <- seq(0.0,0.4,0.1)
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(X,y, type="l", lwd=1)
X <- seq(0.0,0.4,0.1)
#x   <- seq(0,20,length=1000)
y   <- dnorm(X,mean=10, sd=3)
plot(X,y, type="l", lwd=1)
X <- seq(0.0,0.4,0.1)
Y <- seq(0,20,5)
x   <- seq(0,20,length=1000)
y   <- dnorm(X,mean=10, sd=3)
y
x
library(ggplot2)
X <- seq(0.0,0.4,0.1)
Y <- seq(0,20,5)
mtcars$x   <- seq(0,20,length=1000)
mtcars$y   <- dnorm(X,mean=10, sd=3)
qplot(mpg, data=mtcars)
?data.frame
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
df = data.frame(n, s)
df
library(ggplot2)
X <- seq(0.0,0.4,0.1)
Y <- seq(0,20,5)
x   <- seq(0,20,length=1000)
y   <- dnorm(X,mean=10, sd=3)
df = data.frame(x, y)
qplot(X, Y, data=df)
library(ggplot2)
X <- seq(0.0,0.4,0.1)
qplot(mpg, data=mtcars)
library(ggplot2)
X <- seq(0.0,0.4,0.1)
X
Y <- seq(0,20,5)
Y
x   <- seq(0,20,length=1000)
y   <- dnorm(X,mean=10, sd=3)
df = data.frame(x, y)
df
qplot(X, Y, data=df)
X<- seq(0,20,by=0.1)
plot(X, dnorm(X, mean=10, sd=1), type="l", xlab=expression(x), ylab=expression(f(x)))
lines(X, dnorm(X, mean=10, sd=2), type="l", lty="dashed")
lines(X, dnorm(X, mean=10, sd=3), type="l", lty="dotdash")
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16), y0=c(dnorm(11,10,1)+0.1,
dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1),
c(expression(sigma==1), expression(sigma=2), expression(sigma=3)))
rm(X)
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16), y0=c(dnorm(11,10,1)+0.1,
dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1),
c(expression(sigma==1), expression(sigma=2), expression(sigma=3)))
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)))
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16))
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16),
y0=c(dnorm(11,10,1)+0.1,
dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1))
?arrow
X<- seq(0,20,by=0.1)
plot(X, dnorm(X, mean=10, sd=1), type="l", xlab=expression(x), ylab=expression(f(x)))
lines(X, dnorm(X, mean=10, sd=2), type="l", lty="dashed")
lines(X, dnorm(X, mean=10, sd=3), type="l", lty="dotdash")
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16),
y0=c(dnorm(11,10,1)+0.1,
dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1))
text(c(18,18,18),
c(dnorm(11,10,1)+0.1,dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1)
c(expression(sigma==1), expression(sigma==2), expression(sigma==3)))
rm(X)
X<- seq(0,20,by=0.1)
plot(X, dnorm(X, mean=10, sd=1), type="l", xlab=expression(x), ylab=expression(f(x)))
lines(X, dnorm(X, mean=10, sd=2), type="l", lty="dashed")
lines(X, dnorm(X, mean=10, sd=3), type="l", lty="dotdash")
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16),
y0=c(dnorm(11,10,1)+0.1,
dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1))
text(c(18,18,18),
c(dnorm(11,10,1)+0.1,dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1),
c(expression(sigma==1), expression(sigma==2), expression(sigma==3)))
X<- seq(0,20,by=0.1)
plot(X, dnorm(X, mean=10, sd=1), type="l", xlab=expression(x), ylab=expression(f(x)))
lines(X, dnorm(X, mean=10, sd=2), type="l", lty="dashed")
lines(X, dnorm(X, mean=10, sd=3), type="l", lty="dotdash")
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16),
y0=c(dnorm(11,10,1)+0.1,
dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1))
text(c(18,18,18),
c(dnorm(11,10,1)+0.1,dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1),
c(expression(sigma==1), expression(sigma==2), expression(sigma==3)))
rm(X)
X<-seq(-3,3,by=0.1)
plot(X,pnorm(X, mean=1, sd=1), type="l",
xlab=expression(x), ylab=expression("c.d.f cua Gauss chuan"));
layout(matrix(1:2,nrow=1))
X<-0:5
plot(X,dbinom(X,size=5,prob=0.5), type="h", xlab = "", ylab = "")
plot(X,dbinom(X,size=5,prob=0.5), type="s", xlab = "", ylab = "")
layout(1)
layout(matrix(1:2,nrow=1))
X<-0:5
plot(X,dbinom(X,size=5,prob=0.5), type="h", xlab = "", ylab = "")
plot(X,pbinom(X,size=5,prob=0.5), type="s", xlab = "", ylab = "")
layout(1)
setwd('/home/thuy1/git/predictUsingProbability/Preprocess')
freqVerySmall_OnTime=read.table(file="freqVerySmall_OnTime.csv")[,1]
plot(density(freqVerySmall_OnTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
rug(freqVerySmall_OnTime)
freqVerySmall_OnTime_KDE<-density(freqVerySmall_OnTime)
freqVerySmall_OnTime_BW=freqVerySmall_OnTime_KDE$bw
freqVerySmall_OnTime_KDE_Estimation<-function(t){
kernelValues <- rep(0,length(freqVerySmall_OnTime))
for(i in 1:length(freqVerySmall_OnTime)) {
transformed = (t - freqVerySmall_OnTime[i]) / freqVerySmall_OnTime_BW
kernelValues[i] = dnorm(transformed, mean = 0, sd = 1) / freqVerySmall_OnTime_BW
}
return(sum(kernelValues)/length(freqVerySmall_OnTime))
}
freqVerySmall_LateTime=read.table(file="freqVerySmall_LateTime.csv")[,1]
plot(density(freqVerySmall_LateTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
rug(freqVerySmall_LateTime)
freqVerySmall_LateTime_KDE<-density(freqVerySmall_LateTime)
freqVerySmall_LateTime_BW=freqVerySmall_LateTime_KDE$bw
freqVerySmall_LateTime_KDE_Estimation<-function(t){
kernelValues <- rep(0,length(freqVerySmall_LateTime))
for(i in 1:length(freqVerySmall_LateTime)) {
transformed = (t - freqVerySmall_LateTime[i]) / freqVerySmall_LateTime_BW
kernelValues[i] = dnorm(transformed, mean = 0, sd = 1) / freqVerySmall_LateTime_BW
}
return(sum(kernelValues)/length(freqVerySmall_LateTime))
}
freqSmall_OnTime=read.table(file="freqSmall_OnTime.csv")[,1]
plot(density(freqSmall_OnTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
rug(freqSmall_OnTime)
freqSmall_OnTime_KDE<-density(freqSmall_OnTime)
freqSmall_OnTime_BW=freqSmall_OnTime_KDE$bw
freqSmall_OnTime_KDE_Estimation<-function(t){
kernelValues <- rep(0,length(freqSmall_OnTime))
for(i in 1:length(freqSmall_OnTime)) {
transformed = (t - freqSmall_OnTime[i]) / freqSmall_OnTime_BW
kernelValues[i] = dnorm(transformed, mean = 0, sd = 1) / freqSmall_OnTime_BW
}
return(sum(kernelValues)/length(freqSmall_OnTime))
}
freqSmall_LateTime=read.table(file="freqSmall_LateTime.csv")[,1]
plot(density(freqSmall_OnTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
rug(freqSmall_OnTime)
freqSmall_LateTime_KDE<-density(freqSmall_LateTime)
freqSmall_LateTime_BW=freqSmall_LateTime_KDE$bw
freqSmall_LateTime_KDE_Estimation<-function(t){
kernelValues <- rep(0,length(freqSmall_LateTime))
for(i in 1:length(freqSmall_LateTime)) {
transformed = (t - freqSmall_LateTime[i]) / freqSmall_LateTime_BW
kernelValues[i] = dnorm(transformed, mean = 0, sd = 1) / freqSmall_LateTime_BW
}
return(sum(kernelValues)/length(freqSmall_LateTime))
}
freqMedium_OnTime=read.table(file="freqMedium_OnTime.csv")[,1]
plot(density(freqMedium_OnTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
rug(freqMedium_OnTime)
freqMedium_OnTime_KDE<-density(freqMedium_OnTime)
freqMedium_OnTime_BW=freqMedium_OnTime_KDE$bw
freqMedium_OnTime_KDE_Estimation<-function(t){
kernelValues <- rep(0,length(freqMedium_OnTime))
for(i in 1:length(freqMedium_OnTime)) {
transformed = (t - freqMedium_OnTime[i]) / freqMedium_OnTime_BW
kernelValues[i] = dnorm(transformed, mean = 0, sd = 1) / freqMedium_OnTime_BW
}
return(sum(kernelValues)/length(freqMedium_OnTime))
}
freqMedium_LateTime=read.table(file="freqMedium_LateTime.csv")[,1]
plot(density(freqMedium_LateTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
rug(freqMedium_LateTime)
freqMedium_LateTime_KDE<-density(freqMedium_LateTime)
freqMedium_LateTime_BW=freqMedium_LateTime_KDE$bw
freqMedium_LateTime_KDE_Estimation<-function(t){
kernelValues <- rep(0,length(freqMedium_LateTime))
for(i in 1:length(freqMedium_LateTime)) {
transformed = (t - freqMedium_LateTime[i]) / freqMedium_LateTime_BW
kernelValues[i] = dnorm(transformed, mean = 0, sd = 1) / freqMedium_LateTime_BW
}
return(sum(kernelValues)/length(freqMedium_LateTime))
}
freqHigh_OnTime=read.table(file="freqHigh_OnTime.csv")[,1]
plot(density(freqHigh_OnTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
rug(freqHigh_OnTime)
freqHigh_OnTime_KDE<-density(freqHigh_OnTime)
freqHigh_OnTime_BW=freqHigh_OnTime_KDE$bw
freqHigh_OnTime_KDE_Estimation<-function(t){
kernelValues <- rep(0,length(freqHigh_OnTime))
for(i in 1:length(freqHigh_OnTime)) {
transformed = (t - freqHigh_OnTime[i]) / freqHigh_OnTime_BW
kernelValues[i] = dnorm(transformed, mean = 0, sd = 1) / freqHigh_OnTime_BW
}
return(sum(kernelValues)/length(freqHigh_OnTime))
}
freqHigh_LateTime=read.table(file="freqHigh_LateTime.csv")[,1]
plot(density(freqHigh_LateTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
rug(freqHigh_LateTime)
freqHigh_LateTime_KDE<-density(freqHigh_LateTime)
freqHigh_LateTime_BW=freqMedium_LateTime_KDE$bw
freqHigh_LateTime_KDE_Estimation<-function(t){
kernelValues <- rep(0,length(freqHigh_LateTime))
for(i in 1:length(freqHigh_LateTime)) {
transformed = (t - freqHigh_LateTime[i]) / freqHigh_LateTime_BW
kernelValues[i] = dnorm(transformed, mean = 0, sd = 1) / freqHigh_LateTime_BW
}
return(sum(kernelValues)/length(freqHigh_LateTime))
}
freqVeryHigh_OnTime=read.table(file="freqVeryhigh_OnTime.csv")[,1]
plot(density(freqVeryHigh_OnTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
rug(freqVeryHigh_OnTime)
freqVeryHigh_OnTime_KDE<-density(freqVeryHigh_OnTime)
freqVeryHigh_OnTime_BW=freqVeryHigh_OnTime_KDE$bw
freqVeryHigh_OnTime_KDE_Estimation<-function(t){
kernelValues <- rep(0,length(freqVeryHigh_OnTime))
for(i in 1:length(freqVeryHigh_OnTime)) {
transformed = (t - freqVeryHigh_OnTime[i]) / freqVeryHigh_OnTime_BW
kernelValues[i] = dnorm(transformed, mean = 0, sd = 1) / freqVeryHigh_OnTime_BW
}
return(sum(kernelValues)/length(freqVeryHigh_OnTime))
}
freqVeryHigh_LateTime=read.table(file="freqVeryhigh_LateTime.csv")[,1]
plot(density(freqVeryHigh_LateTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
rug(freqVeryHigh_LateTime)
freqVeryHigh_LateTime_KDE<-density(freqVeryHigh_LateTime)
freqVeryHigh_LateTime_BW=freqVeryHigh_LateTime_KDE$bw
freqVeryHigh_LateTime_KDE_Estimation<-function(t){
kernelValues <- rep(0,length(freqVeryHigh_LateTime))
for(i in 1:length(freqVeryHigh_LateTime)) {
transformed = (t - freqVeryHigh_LateTime[i]) / freqVeryHigh_LateTime_BW
kernelValues[i] = dnorm(transformed, mean = 0, sd = 1) / freqVeryHigh_LateTime_BW
}
return(sum(kernelValues)/length(freqVeryHigh_LateTime))
}
testData=read.csv("testData.txt", header = FALSE)
testData
p_onTime=0.84
p_lateTime=0.16
calculateOnTime <- function(x, output) {
p_X_OnTime <- freqVerySmall_OnTime_KDE_Estimation(x[1])*freqSmall_OnTime_KDE_Estimation(x[2])*
freqMedium_OnTime_KDE_Estimation(x[3])*freqHigh_OnTime_KDE_Estimation(x[4])*freqVeryHigh_OnTime_KDE_Estimation(x[5])
p_X_LateTime <- freqVerySmall_LateTime_KDE_Estimation(x[1])*freqSmall_LateTime_KDE_Estimation(x[2])*
freqMedium_LateTime_KDE_Estimation(x[3])*freqHigh_LateTime_KDE_Estimation(x[4])*freqVeryHigh_LateTime_KDE_Estimation(x[5])
p_onTime_x=(p_X_OnTime*p_onTime)/(p_X_OnTime*p_onTime+p_X_LateTime*p_lateTime)
cat(paste(x[1],x[2], x[3], x[4], x[5], p_onTime_x, sep=","), file= output, append = T, fill = T)
}
apply(testData, 1, calculateOnTime, output = 'calculateOnTime.txt')
classify <- function(x, output) {
p_X_OnTime <- freqVerySmall_OnTime_KDE_Estimation(x[1])*freqSmall_OnTime_KDE_Estimation(x[2])*
freqMedium_OnTime_KDE_Estimation(x[3])*freqHigh_OnTime_KDE_Estimation(x[4])*freqVeryHigh_OnTime_KDE_Estimation(x[5])
p_X_LateTime <- freqVerySmall_LateTime_KDE_Estimation(x[1])*freqSmall_LateTime_KDE_Estimation(x[2])*
freqMedium_LateTime_KDE_Estimation(x[3])*freqHigh_LateTime_KDE_Estimation(x[4])*freqVeryHigh_LateTime_KDE_Estimation(x[5])
p_onTime_x=(p_X_OnTime*p_onTime)/(p_X_OnTime*p_onTime+p_X_LateTime*p_lateTime)
p_lateTime_x=(p_X_LateTime*p_lateTime)/(p_X_OnTime*p_onTime+p_X_LateTime*p_lateTime)
class=ifelse(p_onTime_x>p_lateTime_x,"onTime","lateTime")
cat(paste(x[1],x[2], x[3], x[4], x[5], class, sep=","), file= output, append = T, fill = T)
}
apply(testData, 1, classify, output = 'classify.txt')
