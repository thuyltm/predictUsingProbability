require(graphics)
list(x = cars[,1], y = cars[,2])
cars
control <- list(num.labels = 15, type.mf = "GAUSSIAN", type.defuz = "WAM",
type.tnorm = "MIN", type.snorm = "MAX", type.implication.func = "ZADEH",
name = "sim-0")
control
method.type <- "WM"
range.data
method.type
?frbs.learn
data.train
data(iris)
set.seed(2)
irisShuffled <- iris[sample(nrow(iris)), ]
iris
nrow(iris)
sample(nrow(iris))
?nrow
ma <- matrix(1:12, 3, 4)
ma
nrow(ma)
?sample
require(frbs)
data(iris)
set.seed(2)
irisShuffled <- iris[sample(nrow(iris)), ]
iris
nrow(iris)
sample(nrow(iris))
iris[sample(nrow(iris)),]
irisShuffled <- iris[sample(nrow(iris)), ]
irisShuffled[, 5]
?unclass
x <- 10
class(x) # "numeric"
oldClass(x) # NULL
inherits(x, "a") #FALSE
class(x) <- c("a", "b")
inherits(x,"a") #TRUE
inherits(x, "a", TRUE) # 1
inherits(x, "c", TRUE) # 1
inherits(x, "b", TRUE) # 1
inherits(x, "b") # 1
irisShuffled[, 5]
unclass(irisShuffled[, 5])
irisShuffled[, 5] <- unclass(irisShuffled[, 5])
irisShuffled
tra.iris <- irisShuffled[1 : 105, ]
irisShuffled[1 : 105, ]
tra.iris
tst.iris <- irisShuffled[106 : nrow(irisShuffled), 1 : 4]
real.iris <- matrix(irisShuffled[106 : nrow(irisShuffled), 5], ncol = 1)
real.iris
-ncol(iris)
iris[, -ncol(iris)]
range.data.input <- apply(iris[, -ncol(iris)], 2, range)
method.type <- "FRBCS.W"
control <- list(num.labels = 7, type.mf = "GAUSSIAN", type.tnorm = "MIN",
type.snorm = "MAX", type.implication.func = "ZADEH")
control
?frbs.learn
frbs.learn(tra.iris, range.data.input, method.type, control)
?type.implication.func
predict(object.cls, tst.iris)
object.cls <- frbs.learn(tra.iris, range.data.input, method.type, control)
predict(object.cls, tst.iris)
tst.iris
res.test <- predict(object.cls, tst.iris)
summary(object.cls)
plotMF(object.cls)
data(frbsData)
frbsData
data.train <- frbsData$GasFurnance.dt[1 : 204, ]
data.tst <- frbsData$GasFurnance.dt[205 : 292, 1 : 2]
real.val <- matrix(frbsData$GasFurnance.dt[205 : 292, 3], ncol = 1)
range.data <-apply(data.train, 2, range)
method.type <- "WM"
control <- list(num.labels = 15, type.mf = "GAUSSIAN", type.defuz = "WAM",
type.tnorm = "MIN", type.snorm = "MAX", type.implication.func = "ZADEH",
name = "sim-0")
object.reg <- frbs.learn(data.train, range.data, method.type, control)
res.test <- predict(object.reg, data.tst)
summary(object.reg)
plotMF(object.reg)
data(frbsData)
data.train <- frbsData$GasFurnance.dt[1 : 204, ]
data.fit <- data.train[, 1 : 2]
data.tst <- frbsData$GasFurnance.dt[205 : 292, 1 : 2]
real.val <- matrix(frbsData$GasFurnance.dt[205 : 292, 3], ncol = 1)
range.data<-matrix(c(-2.716, 2.834, 45.6, 60.5, 45.6, 60.5), nrow = 2)
method.type <- "WM"
control <- list(num.labels = 3, type.mf = "GAUSSIAN", type.defuz = "WAM",
type.tnorm = "MIN", type.snorm = "MAX",
type.implication.func = "ZADEH", name="sim-0")
object <- frbs.learn(data.train, range.data, method.type, control)
frbsPMML(object)
require(frbs)
data(iris)
set.seed(2)
irisShuffled <- iris[sample(nrow(iris)), ]
irisShuffled[, 5] <- unclass(irisShuffled[, 5])
tra.iris <- irisShuffled[1 : 105, ]
tst.iris <- irisShuffled[106 : nrow(irisShuffled), 1 : 4]
real.iris <- matrix(irisShuffled[106 : nrow(irisShuffled), 5], ncol = 1)
range.data.input <- apply(iris[, -ncol(iris)], 2, range)
method.type <- "FRBCS.W"
control <- list(num.labels = 7, type.mf = "TRIANGLE", type.tnorm = "MIN",
type.snorm = "MAX", type.implication.func = "ZADEH")
object.cls <- frbs.learn(tra.iris, range.data.input, method.type, control)
res.test <- predict(object.cls, tst.iris)
summary(object.cls)
plotMF(object.cls)
data(iris)
set.seed(2)
irisShuffled <- iris[sample(nrow(iris)), ]
irisShuffled[, 5] <- unclass(irisShuffled[, 5])
tra.iris <- irisShuffled[1 : 105, ]
tst.iris <- irisShuffled[106 : nrow(irisShuffled), 1 : 4]
real.iris <- matrix(irisShuffled[106 : nrow(irisShuffled), 5], ncol = 1)
range.data.input <- apply(iris[, -ncol(iris)], 2, range)
method.type <- "FRBCS.W"
control <- list(num.labels = 7, type.mf = "TRAPEZOID", type.tnorm = "MIN",
type.snorm = "MAX", type.implication.func = "ZADEH")
object.cls <- frbs.learn(tra.iris, range.data.input, method.type, control)
res.test <- predict(object.cls, tst.iris)
summary(object.cls)
plotMF(object.cls)
iris
range.data.input
summary(object.cls)
x = sample(-100:100,50)
normalized = (x-min(x))/(max(x)-min(x))
par(mfrow=c(1,2))
hist(x,xlab="Data",col="lightblue",main="")
hist(normalized,xlab="Normalized Data",col="lightblue",main="")
x
x = sample(-100:100,50)
x
require(frbs)
require(frbs)
data("iris", package = "datasets")
irisShuffled <- iris[sample(nrow(iris)), ]
irisShuffled[, 5] <- unclass(irisShuffled[, 5])
range.data.input <- apply(iris[, -ncol(iris)], 2, range)
tra.iris <- irisShuffled[1:140, ]
tst.iris <- irisShuffled[141:nrow(irisShuffled), 1:4]
real.iris <- matrix(irisShuffled[141:nrow(irisShuffled), 5], ncol = 1)
object.frbcs.w <- frbs.learn(tra.iris, range.data.input,
method.type = "FRBCS.W",
control = list(num.labels = 3,
type.mf = "TRAPEZOID"))
summary(object.frbcs.w)
tra.iris
res.test <- predict(object.frbcs.w, tst.iris )
res.test
real.iris
plotMF(object.frbcs.w)
install.packages(’FuzzyNumbers’)
install.packages('FuzzyNumbers')
library(help='FuzzyNumbers')
rm(list=ls(all.names = TRUE))
head(airquality)
ozone = airquality$Ozone
length(ozone)
summary(ozone)
length(ozone[is.na(ozone)==F])
length(ozone[!is.na(ozone)])
n=sum(!is.na(ozone))
n
mean(ozone)
mean.ozone = mean(ozone, na.rm = T)
mean.ozone
var.ozone = var(ozone, na.rm = T)
var.ozone
sd.ozone = sd(ozone, na.rm = T)
sd.ozone
max.ozone = max(ozone, na.rm = T)
max.ozone
hist(ozone)
hist(ozone, breaks = 15)
hist(ozone, breaks = 15, freq = F)
hist(ozone, breaks = 15, freq = F,ylim = c(0, 0.025))
hist(ozone, breaks = 15, freq = F, xlab = 'Ozone (ppb)',
ylim = c(0, 0.025), ylab = 'Probability',
main = 'Histogram of Ozone Pollution Data with Kernel Density Plot')
lines(density(ozone, na.rm = T, from = 0, to = max.ozone))
lines(density(ozone, na.rm = T, from = 0, to = max.ozone))
?dunif
x
x=seq(-1.5, 1.5, by=0.01)
x
x=seq(-1.5, 1.5, by=0.01)
uniform1 = dunif(x, min=-0.25, max=0.25)
uniform2 = dunif(x, min=-1.00, max=1.00)
plot(x, uniform1, type = 'l', ylab='f(x)',
xlab='x',
main = '2 Uniform Kernels with different bandwidths',
col = 'red')
lines(x, uniform2, col='blue')
legend(0.28, 1.5, c('Uniform(-0.25, 0.25)', 'Uniform(-1.00, 1.00)'), lty = c(1,1), col = c('red', 'blue'), box.lwd = 0)
legend(0.28, 1.5, c('Uniform(-0.25, 0.25)', 'Uniform(-1.00, 1.00)'), lty = c(1,1), col = c('red', 'blue'), box.lwd = 0)
require(frbs)
ozone = airquality$Ozone
n = sum(!is.na(ozone))
mean.ozone = mean(ozone, na.rm = T)
mean.ozone
var.ozone = var(ozone, na.rm = T)
var.ozone
sd.ozone = sd(ozone, na.rm = T)
sd.ozone
set.seed(1)
ozone2 = rgamma(n, shape = mean.ozone^2/var.ozone+3,
scale = var.ozone/mean.ozone+3)
density.ozone = density(ozone, na.rm = T)
density.ozone2 = density(ozone2, na.rm = T)
n.density1 = density.ozone$n
n.density2 = density.ozone2$n
bw.density1 = density.ozone$bw
bw.density2 = density.ozone2$bw
plot(density.ozone2,
main = 'Kernel Density Estimates of Ozone \n in New York and Ozonopolis',
xlab = 'Ozone (ppb)', ylab = 'Density',
ylim = c(0, max(density.ozone$y, na.rm = T)), lty = 1)
lines(density.ozone, lty=3)
legend(100, 0.015, paste('New York: N = ', n.density1, ', Bandwidth = ',
round(bw.density1, 1), sep = ''), bty = 'n')
legend(100, 0.013, paste('Ozonopolis: N = ', n.density2, ', Bandwidth = ',
round(bw.density2, 1), sep = ''), bty = 'n')
legend(115, 0.011, c('New York', 'Ozonopolis'), lty = c(3,1), bty = 'n')
plot(density.ozone,
main = 'Kernel Density Plot and Rug Plot of Ozone \n in New York',
xlab = 'Ozone (ppb)', ylab = 'Density')
rug(ozone)
ozone
ozone2
plot(ozone2)
plot(ozone)
plot(ozone2)
plot(ozone)
density.ozone
plot(density.ozone)
plot(density.ozone2)
plot(density.ozone2,
main = 'Kernel Density Estimates of Ozone \n in New York and Ozonopolis',
xlab = 'Ozone (ppb)', ylab = 'Density',
ylim = c(0, max(density.ozone$y, na.rm = T)), lty = 1)
lines(density.ozone, lty=3)
plot(ozone)
lines(ozone2)
line(density.ozone)
plot(density.ozone)
lines(ozone)
plot(ozone)
lines(ozone)
plot(density.ozone)
plot(ozone)
plot(density.ozone)
plot(ozone)
plot(density.ozone)
x<-seq(-3,3,by=0.1)
plot(X,pnorm(X, mean=1, sd=1), type="l",
xlab=expression(x), ylab=expression("c.d.f cua Gauss chuan"));
X<-seq(-3,3,by=0.1)
plot(X,pnorm(X, mean=1, sd=1), type="l",
xlab=expression(x), ylab=expression("c.d.f cua Gauss chuan"));
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
x   <- seq(5,15,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
arrows(0.5,0.1,-0.2,0,length=.15)
text(0.5,0.12,"-0.2533")
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
?plot
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
par(new=TRUE)
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=1)
plot(x,y, type="p", lwd=1)
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
par(new=TRUE)
x1   <- seq(0,20,length=1000)
y1   <- dnorm(x,mean=10, sd=1)
plot(x1,y1, type="l", lwd=1)
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
par(new=TRUE)
x1   <- seq(0,20,length=1000)
y1   <- dnorm(x,mean=10, sd=1)
plot(x1,y1, type="l", lwd=1)
x2   <- seq(0,20,length=1000)
y2   <- dnorm(x,mean=10, sd=2)
plot(x2,y2, type="l", lwd=1)
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
par(new=TRUE)
x1   <- seq(0,20,length=1000)
y1   <- dnorm(x,mean=10, sd=1)
plot(x1,y1, type="l", lwd=1)
par(new=TRUE)
x2   <- seq(0,20,length=1000)
y2   <- dnorm(x,mean=10, sd=2)
plot(x2,y2, type="l", lwd=1)
?plot
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(x,y, type="l", lwd=1)
par(new=TRUE)
x1   <- seq(0,20,length=1000)
y1   <- dnorm(x,mean=10, sd=1)
plot(x1,y1, type="l", lwd=1)
par(new=TRUE)
x2   <- seq(0,20,length=1000)
y2   <- dnorm(x,mean=10, sd=2)
plot(x2,y2, type="l", lwd=1)
X <- seq(0.0,0.4,0.1)
x   <- seq(0,20,length=1000)
y   <- dnorm(x,mean=10, sd=3)
plot(X,y, type="l", lwd=1)
X <- seq(0.0,0.4,0.1)
#x   <- seq(0,20,length=1000)
y   <- dnorm(X,mean=10, sd=3)
plot(X,y, type="l", lwd=1)
X <- seq(0.0,0.4,0.1)
Y <- seq(0,20,5)
x   <- seq(0,20,length=1000)
y   <- dnorm(X,mean=10, sd=3)
y
x
library(ggplot2)
X <- seq(0.0,0.4,0.1)
Y <- seq(0,20,5)
mtcars$x   <- seq(0,20,length=1000)
mtcars$y   <- dnorm(X,mean=10, sd=3)
qplot(mpg, data=mtcars)
?data.frame
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
df = data.frame(n, s)
df
library(ggplot2)
X <- seq(0.0,0.4,0.1)
Y <- seq(0,20,5)
x   <- seq(0,20,length=1000)
y   <- dnorm(X,mean=10, sd=3)
df = data.frame(x, y)
qplot(X, Y, data=df)
library(ggplot2)
X <- seq(0.0,0.4,0.1)
qplot(mpg, data=mtcars)
library(ggplot2)
X <- seq(0.0,0.4,0.1)
X
Y <- seq(0,20,5)
Y
x   <- seq(0,20,length=1000)
y   <- dnorm(X,mean=10, sd=3)
df = data.frame(x, y)
df
qplot(X, Y, data=df)
X<- seq(0,20,by=0.1)
plot(X, dnorm(X, mean=10, sd=1), type="l", xlab=expression(x), ylab=expression(f(x)))
lines(X, dnorm(X, mean=10, sd=2), type="l", lty="dashed")
lines(X, dnorm(X, mean=10, sd=3), type="l", lty="dotdash")
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16), y0=c(dnorm(11,10,1)+0.1,
dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1),
c(expression(sigma==1), expression(sigma=2), expression(sigma=3)))
rm(X)
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16), y0=c(dnorm(11,10,1)+0.1,
dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1),
c(expression(sigma==1), expression(sigma=2), expression(sigma=3)))
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)))
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16))
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16),
y0=c(dnorm(11,10,1)+0.1,
dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1))
?arrow
X<- seq(0,20,by=0.1)
plot(X, dnorm(X, mean=10, sd=1), type="l", xlab=expression(x), ylab=expression(f(x)))
lines(X, dnorm(X, mean=10, sd=2), type="l", lty="dashed")
lines(X, dnorm(X, mean=10, sd=3), type="l", lty="dotdash")
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16),
y0=c(dnorm(11,10,1)+0.1,
dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1))
text(c(18,18,18),
c(dnorm(11,10,1)+0.1,dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1)
c(expression(sigma==1), expression(sigma==2), expression(sigma==3)))
rm(X)
X<- seq(0,20,by=0.1)
plot(X, dnorm(X, mean=10, sd=1), type="l", xlab=expression(x), ylab=expression(f(x)))
lines(X, dnorm(X, mean=10, sd=2), type="l", lty="dashed")
lines(X, dnorm(X, mean=10, sd=3), type="l", lty="dotdash")
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16),
y0=c(dnorm(11,10,1)+0.1,
dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1))
text(c(18,18,18),
c(dnorm(11,10,1)+0.1,dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1),
c(expression(sigma==1), expression(sigma==2), expression(sigma==3)))
X<- seq(0,20,by=0.1)
plot(X, dnorm(X, mean=10, sd=1), type="l", xlab=expression(x), ylab=expression(f(x)))
lines(X, dnorm(X, mean=10, sd=2), type="l", lty="dashed")
lines(X, dnorm(X, mean=10, sd=3), type="l", lty="dotdash")
arrows(x1=c(11,11,11),
y1=c(dnorm(11,10,1), dnorm(11,10,2), dnorm(11,10,3)),
x0=c(16,16,16),
y0=c(dnorm(11,10,1)+0.1,
dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1))
text(c(18,18,18),
c(dnorm(11,10,1)+0.1,dnorm(11,10,2)+0.1, dnorm(11,10,3)+0.1),
c(expression(sigma==1), expression(sigma==2), expression(sigma==3)))
rm(X)
X<-seq(-3,3,by=0.1)
plot(X,pnorm(X, mean=1, sd=1), type="l",
xlab=expression(x), ylab=expression("c.d.f cua Gauss chuan"));
layout(matrix(1:2,nrow=1))
X<-0:5
plot(X,dbinom(X,size=5,prob=0.5), type="h", xlab = "", ylab = "")
plot(X,dbinom(X,size=5,prob=0.5), type="s", xlab = "", ylab = "")
layout(1)
layout(matrix(1:2,nrow=1))
X<-0:5
plot(X,dbinom(X,size=5,prob=0.5), type="h", xlab = "", ylab = "")
plot(X,pbinom(X,size=5,prob=0.5), type="s", xlab = "", ylab = "")
layout(1)
setwd('/home/thuy1/git/predictUsingProbability/Preprocess')
onTime=read.table(file="freqVerySmall_OnTime.csv")[,1]
onTime
density(onTime)
plot(density(onTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
library(plyr)
ozone
airquality$Ozone
library(plyr)
ozone = airquality$Ozone
n = sum(!is.na(ozone))
mean.ozone = mean(ozone, na.rm = T)
var.ozone = var(ozone, na.rm = T)
sd.ozone = sd(ozone, na.rm = T)
set.seed(1)
ozone2 = rgamma(n, shape=mean.ozone^2/var.ozone+3,scale = var.ozone/mean.ozone+3 )
density.ozone = density(ozone, na.rm = T)
density.ozone2 = density(ozone2, na.rm = T)
n.density1 = density.ozone$n
n.density2 = density.ozone2$n
bw.density1 = density.ozone$bw
bw.density2 = density.ozone2$bw
plot(density.ozone2, main = 'Kernel Density Estimates of Ozone \n in New York and Ozonopolis', xlab = 'Ozone (ppb)', ylab = 'Density', ylim = c(0, max(density.ozone$y, na.rm = T)), lty = 1)
lines(density.ozone, lty = 3)
legend(100, 0.015, paste('New York: N = ', n.density1, ', Bandwidth = ', round(bw.density1, 1), sep = ''), bty = 'n')
legend(100, 0.013, paste('Ozonopolis: N = ', n.density2, ', Bandwidth = ', round(bw.density2, 1), sep = ''), bty = 'n')
legend(115, 0.011, c('New York', 'Ozonopolis'), lty = c(3,1), bty = 'n')
plot(density.ozone, main = 'Kernel Density Plot and Rug Plot of Ozone \n in New York', xlab = 'Ozone (ppb)', ylab = 'Density')
rug(ozone)
setwd('/home/thuy1/git/predictUsingProbability/Preprocess')
onTime=read.table(file="freqVerySmall_OnTime.csv")[,1]
onTime
density(onTime)
plot(density(onTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
rug(onTime)
summary(density(onTime))
summary(density.ozone)
summary(ozone)
d<-density(onTime)
h=d$bw
myKDE<-function(t){
kernelValues <- rep(0,length(onTime))
for(i in 1:length(onTime)) {
transformed = (t - onTime[i]) / h
kernelValues[i] = dnorm(transformed, mean = 0, sd = 1) / h
}
return(sum(kernelValues)/length(onTime))
}
onTime
plot(density(onTime, kernel=c("gaussian")),
main="the Gaussian smoothing kernel of Very Small Step",
ylab="density", xlab="the occurrences of Very Small step",
col="green",
xlim=c(-10,100))
rug(onTime)
myKDE(39)
myKDE(19)
